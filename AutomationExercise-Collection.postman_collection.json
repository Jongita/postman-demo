{
	"info": {
		"_postman_id": "1b7e0574-a33f-46e9-863d-854d25020fbd",
		"name": "AutomationExercise Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36195829"
	},
	"item": [
		{
			"name": "Get All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains products\", function () {\r",
							"    const data = pm.response.json();\r",
							"    \r",
							"    // Check if 'products' array exists and has at least one product\r",
							"    pm.expect(data.products).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    // Check if the first product has a name, id, price, brand and category)\r",
							"    pm.expect(data.products[0]).to.have.property('name');\r",
							"    pm.expect(data.products[0]).to.have.property('id');\r",
							"    pm.expect(data.products[0]).to.have.property('price');\r",
							"    pm.expect(data.products[0]).to.have.property('brand');\r",
							"    pm.expect(data.products[0]).to.have.property('category');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has the correct format\", function () {\r",
							"    // Parse the response JSON\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Check if the response contains \"responseCode\" and \"products\"\r",
							"    pm.expect(jsonData).to.have.property(\"responseCode\");\r",
							"    pm.expect(jsonData.responseCode).to.eql(200);\r",
							"    pm.expect(jsonData).to.have.property(\"products\").that.is.an(\"array\");\r",
							"\r",
							"    // Check each product object in the array\r",
							"    jsonData.products.forEach(function (product) {\r",
							"        pm.expect(product).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        pm.expect(product).to.have.property(\"price\").that.is.a(\"string\");\r",
							"        pm.expect(product).to.have.property(\"brand\").that.is.a(\"string\");\r",
							"        pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
							"\r",
							"        // Check the category object\r",
							"        pm.expect(product.category).to.have.property(\"usertype\").that.is.an(\"object\");\r",
							"        pm.expect(product.category.usertype).to.have.property(\"usertype\").that.is.a(\"string\");\r",
							"        pm.expect(product.category).to.have.property(\"category\").that.is.a(\"string\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST To All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Test to check the response body for correct responseCode and message\r",
							"pm.test(\"Response body has correct responseCode and message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Check if responseCode is 405\r",
							"    pm.expect(jsonData.responseCode).to.eql(405);\r",
							"    \r",
							"    // Check if message is \"This request method is not supported.\"\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST To Search Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const productValues = [\"jean\", \"top\", \"tshirt\"];\r",
							"let index = pm.variables.get(\"product_index\") || 0;\r",
							"\r",
							"pm.variables.set(\"search_product\", productValues[index]);\r",
							"index++;\r",
							"\r",
							"if (index < productValues.length) {\r",
							"    pm.variables.set(\"product_index\", index);\r",
							"} else {\r",
							"    pm.variables.unset(\"product_index\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"// Parse response JSON\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Test if response has responseCode and it's 200\r",
							"pm.test(\"Response has responseCode 200\", function () {\r",
							"    pm.expect(jsonData.responseCode).to.eql(200);\r",
							"});\r",
							"\r",
							"// Test if products array exists and is not empty\r",
							"pm.test(\"Products array exists and is not empty\", function () {\r",
							"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"// Loop through products to check required properties\r",
							"jsonData.products.forEach(function (product) {\r",
							"    pm.test(\"Product has required properties\", function () {\r",
							"        pm.expect(product).to.have.property(\"id\");\r",
							"        pm.expect(product).to.have.property(\"name\");\r",
							"        pm.expect(product).to.have.property(\"price\");\r",
							"        pm.expect(product).to.have.property(\"brand\");\r",
							"        pm.expect(product).to.have.property(\"category\");\r",
							"        \r",
							"        // Check if category has the correct structure\r",
							"        pm.expect(product.category).to.have.property(\"usertype\");\r",
							"        pm.expect(product.category).to.have.property(\"category\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "search_product",
							"value": "{{search_product}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/searchProduct",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"searchProduct"
					]
				}
			},
			"response": []
		}
	]
}