{
	"info": {
		"_postman_id": "1b7e0574-a33f-46e9-863d-854d25020fbd",
		"name": "AutomationExercise Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36195829"
	},
	"item": [
		{
			"name": "All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has the correct format\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Check if the response contains \"responseCode\" and \"products\"\r",
							"    pm.expect(jsonData).to.have.property(\"responseCode\");\r",
							"    pm.expect(jsonData.responseCode).to.eql(200);\r",
							"    pm.expect(jsonData).to.have.property(\"products\").that.is.an(\"array\");\r",
							"\r",
							"    // Check each product object in the array\r",
							"    jsonData.products.forEach(function (product) {\r",
							"        pm.expect(product).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        pm.expect(product).to.have.property(\"price\").that.is.a(\"string\");\r",
							"        pm.expect(product).to.have.property(\"brand\").that.is.a(\"string\");\r",
							"        pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
							"\r",
							"        // Check the category object\r",
							"        pm.expect(product.category).to.have.property(\"usertype\").that.is.an(\"object\");\r",
							"        pm.expect(product.category.usertype).to.have.property(\"usertype\").that.is.a(\"string\");\r",
							"        pm.expect(product.category).to.have.property(\"category\").that.is.a(\"string\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST To All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to check the response body for correct responseCode and message\r",
							"pm.test(\"Response body has correct responseCode and message\",  () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Check if responseCode is 405\r",
							"    pm.expect(jsonData.responseCode).to.eql(405);\r",
							"    \r",
							"    // Check if message is \"This request method is not supported.\"\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let dataJson = pm.response.json();\r",
							"\r",
							"// Check that the response contains the 'brands' property\r",
							"pm.test(\"Response has 'brands' property\",  () => {\r",
							"    pm.expect(dataJson).to.have.property('brands');\r",
							"});\r",
							"\r",
							"// Check that 'brands' is an array\r",
							"pm.test(\"'brands' is an array\",  () => {\r",
							"    pm.expect(dataJson.brands).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Check that 'brands' array is not empty\r",
							"pm.test(\"'brands' array is not empty\",  () => {\r",
							"    pm.expect(dataJson.brands).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Check that each brand object has the required properties\r",
							"pm.test(\"Each brand has 'id' and 'brand' properties\",  () => {\r",
							"    dataJson.brands.forEach(function(brand) {\r",
							"        pm.expect(brand).to.have.all.keys('id', 'brand');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/brandsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT To All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code is 200\",  () => {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has correct responseCode and message\",  () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Check if responseCode is 405\r",
							"    pm.expect(jsonData.responseCode).to.eql(405);\r",
							"    \r",
							"    // Check if message is \"This request method is not supported.\"\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/brandsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST To Search Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Test if response has responseCode and it's 200\r",
							"pm.test(\"Response has responseCode 200\",  () => {\r",
							"    pm.expect(jsonData.responseCode).to.eql(200);\r",
							"});\r",
							"\r",
							"// Test if products array exists and is not empty\r",
							"pm.test(\"Products array exists and is not empty\",  () => {\r",
							"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"// Loop through products to check required properties\r",
							"jsonData.products.forEach(function (product) {\r",
							"    pm.test(\"Product has required properties\", () => {\r",
							"        pm.expect(product).to.have.property(\"id\");\r",
							"        pm.expect(product).to.have.property(\"name\");\r",
							"        pm.expect(product).to.have.property(\"price\");\r",
							"        pm.expect(product).to.have.property(\"brand\");\r",
							"        pm.expect(product).to.have.property(\"category\");\r",
							"        \r",
							"        // Check if category has the correct structure\r",
							"        pm.expect(product.category).to.have.property(\"usertype\");\r",
							"        pm.expect(product.category).to.have.property(\"category\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "search_product",
							"value": "top",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/searchProduct",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the response code is 200\r",
							"pm.test(\"Response code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the response body\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Check if responseCode is 201\r",
							"pm.test(\"Response contains responseCode 201\", () => {\r",
							"    pm.expect(jsonData.responseCode).to.eql(201);\r",
							"});\r",
							"\r",
							"// Check if message is \"User created!\"\r",
							"pm.test(\"Response contains message 'User created!'\", () => {\r",
							"    pm.expect(jsonData.message).to.eql(\"User created!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomEmail = `user_${Math.random().toString(36).substring(2, 12)}@test.com`;\r",
							"pm.environment.set(\"randomEmail\", randomEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{randomEmail}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "title",
							"value": "Mr",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "15",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "03",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "1990",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "John",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "Johaness",
							"type": "text"
						},
						{
							"key": "company",
							"value": "Comp ",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "1234 Main St",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "Apt 101",
							"type": "text"
						},
						{
							"key": "country",
							"value": "United States",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "90210",
							"type": "text"
						},
						{
							"key": "state",
							"value": "California",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Beverly Hills",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "+1234567890",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/createAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"createAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"// Check that the status code is 200\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check that the responseCode is 200\r",
							"pm.test(\"Response has responseCode 200\", () => {\r",
							"    pm.expect(responseJson.responseCode).to.equal(200);\r",
							"});\r",
							"\r",
							"// Check that the message is \"Account deleted!\"\r",
							"pm.test(\"Response message is 'Account deleted!'\", () => {\r",
							"    pm.expect(responseJson.message).to.equal(\"Account deleted!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "{{randomEmail}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/deleteAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"deleteAccount"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "randomEmail",
			"value": "{{randomEmail}}",
			"type": "string"
		},
		{
			"key": "password",
			"value": "123456",
			"type": "string"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}